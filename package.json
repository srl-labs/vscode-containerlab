{
  "name": "vscode-containerlab",
  "publisher": "srl-labs",
  "displayName": "Containerlab",
  "icon": "resources/containerlab.png",
  "description": "Manages containerlab topologies in VS Code",
  "author": "SRL Labs",
  "version": "0.18.0",
  "homepage": "https://containerlab.dev/manual/vsc-extension/",
  "engines": {
    "vscode": "^1.99.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/srl-labs/vscode-containerlab"
  },
  "extensionPack": [
    "hediet.vscode-drawio",
    "redhat.vscode-yaml"
  ],
  "main": "./dist/extension.js",
  "activationEvents": [
    "onStartupFinished"
  ],
  "categories": [
    "Programming Languages",
    "Linters",
    "Other"
  ],
  "keywords": [
    "containerlab",
    "clab",
    "docker",
    "container",
    "containers"
  ],
  "license": "Apache-2.0",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "containerlabViewContainer",
          "title": "Containerlab",
          "icon": "resources/containerlab.svg"
        }
      ]
    },
    "views": {
      "containerlabViewContainer": [
        {
          "id": "runningLabs",
          "name": "Running Labs"
        },
        {
          "id": "localLabs",
          "name": "Undeployed Local Labs"
        },
        {
          "id": "helpFeedback",
          "name": "Help & Feedback"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "runningLabs",
        "contents": "No running labs discovered\n[Deploy an existing lab](command:containerlab.lab.deploy.specificFile)"
      },
      {
        "view": "localLabs",
        "contents": "No labs discovered in the current directory\n[Create topology with TopoViewer](command:containerlab.editor.topoViewerEditor)\n[Clone Repository from git](command:containerlab.lab.cloneRepo)\n[Clone popular lab](command:containerlab.lab.clonePopularRepo)",
        "when": "workbenchState != empty"
      },
      {
        "view": "localLabs",
        "contents": "No workspace open\n[Open folder](command:vscode.openFolder)",
        "when": "workbenchState == empty"
      }
    ],
    "commands": [
      {
        "command": "containerlab.refresh",
        "title": "Refresh Containerlab Explorer",
        "icon": "$(refresh)"
      },
      {
        "command": "containerlab.lab.openFile",
        "title": "Edit topology",
        "icon": "$(pencil)"
      },
      {
        "command": "containerlab.editor.topoViewerEditor.open",
        "title": "Edit topology (TopoViewer)"
      },
      {
        "command": "containerlab.lab.copyPath",
        "title": "Copy file path",
        "icon": "$(copy)"
      },
      {
        "command": "containerlab.lab.toggleFavorite",
        "title": "Toggle Favorite",
        "icon": "$(star)"
      },
      {
        "command": "containerlab.lab.delete",
        "title": "Delete lab file",
        "icon": "$(trash)"
      },
      {
        "command": "containerlab.lab.deploy",
        "title": "Deploy",
        "icon": "$(play)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.deploy.cleanup",
        "title": "Deploy (cleanup)",
        "icon": "$(play)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.deploy.specificFile",
        "title": "Deploy lab file",
        "icon": "$(plus)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.deployPopular",
        "title": "Deploy popular lab",
        "icon": "$(star)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.redeploy",
        "title": "Redeploy",
        "icon": "$(refresh)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.redeploy.cleanup",
        "title": "Redeploy (cleanup)",
        "icon": "$(refresh)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.destroy",
        "title": "Destroy",
        "icon": "$(trash)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.destroy.cleanup",
        "title": "Destroy (cleanup)",
        "icon": "$(trash)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.save",
        "title": "Save configs",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.inspectAll",
        "title": "Inspect (All Labs)",
        "category": "Containerlab",
        "icon": "$(info)"
      },
      {
        "command": "containerlab.inspectOneLab",
        "title": "Inspect",
        "category": "Containerlab",
        "icon": "$(info)"
      },
      {
        "command": "containerlab.lab.graph.drawio.horizontal",
        "title": "Graph (draw.io, Horizontal)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.graph.drawio.vertical",
        "title": "Graph (draw.io, Vertical)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.graph.drawio.interactive",
        "title": "Graph (draw.io, Interactive)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.graph.topoViewer",
        "title": "Graph (TopoViewer)",
        "icon": "$(graph-line)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.editor.toggleHideDummyLinks",
        "title": "TopoViewer: Toggle Dummy Links",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.editor.topoViewerEditor",
        "title": "New topology file",
        "icon": "$(new-file)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.cloneRepo",
        "title": "Clone repository from git",
        "icon": "$(repo-clone)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.clonePopularRepo",
        "title": "Clone popular lab",
        "icon": "$(star)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.addToWorkspace",
        "title": "Add to Workspace",
        "category": "Containerlab",
        "icon": "$(folder-opened)"
      },
      {
        "command": "containerlab.lab.openFolderInNewWindow",
        "title": "Open Folder in New Window",
        "icon": "$(folder-opened)"
      },
      {
        "command": "containerlab.lab.sshToAllNodes",
        "title": "SSH (All nodes)"
      },
      {
        "command": "containerlab.node.start",
        "title": "Start"
      },
      {
        "command": "containerlab.node.stop",
        "title": "Stop"
      },
      {
        "command": "containerlab.node.save",
        "title": "Save config"
      },
      {
        "command": "containerlab.node.attachShell",
        "title": "Attach shell",
        "icon": "$(terminal)"
      },
      {
        "command": "containerlab.node.ssh",
        "title": "Connect (SSH)",
        "icon": "$(remote)"
      },
      {
        "command": "containerlab.node.telnet",
        "title": "Connect (Telnet)"
      },
      {
        "command": "containerlab.node.showLogs",
        "title": "View logs",
        "icon": "$(list-unordered)"
      },
      {
        "command": "containerlab.node.manageImpairments",
        "title": "Link Impairments",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.node.copyIPv4Address",
        "title": "IPv4 Address"
      },
      {
        "command": "containerlab.node.copyIPv6Address",
        "title": "IPv6 Address"
      },
      {
        "command": "containerlab.node.copyName",
        "title": "Name"
      },
      {
        "command": "containerlab.node.copyID",
        "title": "Container ID"
      },
      {
        "command": "containerlab.node.copyKind",
        "title": "Kind"
      },
      {
        "command": "containerlab.node.copyImage",
        "title": "Image"
      },
      {
        "command": "containerlab.interface.capture",
        "title": "Capture interface",
        "icon": {
          "light": "resources/icons/wireshark_light.svg",
          "dark": "resources/icons/wireshark_dark.svg"
        }
      },
      {
        "command": "containerlab.interface.captureWithEdgeshark",
        "title": "Capture interface (Edgeshark)"
      },
      {
        "command": "containerlab.interface.captureWithEdgesharkVNC",
        "title": "Capture interface (Edgeshark VNC)"
      },
      {
        "command": "containerlab.interface.setDelay",
        "title": "Set delay"
      },
      {
        "command": "containerlab.interface.setJitter",
        "title": "Set jitter"
      },
      {
        "command": "containerlab.interface.setLoss",
        "title": "Set packet loss"
      },
      {
        "command": "containerlab.interface.setRate",
        "title": "Set rate-limit"
      },
      {
        "command": "containerlab.interface.setCorruption",
        "title": "Set corruption"
      },
      {
        "command": "containerlab.interface.copyMACAddress",
        "title": "Copy MAC address"
      },
      {
        "command": "containerlab.install.edgeshark",
        "title": "Install Edgeshark",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.uninstall.edgeshark",
        "title": "Uninstall Edgeshark",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.capture.killAllWiresharkVNC",
        "title": "Kill all Wireshark VNC containers",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.set.sessionHostname",
        "title": "Configure hostname for this session",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.node.openBrowser",
        "title": "Open Port in Browser",
        "icon": "$(globe)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.openLink",
        "title": "Open Link"
      },
      {
        "command": "containerlab.lab.sshx.attach",
        "title": "Share Lab (attach)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.sshx.detach",
        "title": "Share Lab (detach)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.sshx.reattach",
        "title": "Share Lab (reattach)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.sshx.copyLink",
        "title": "Copy SSHX link"
      },
      {
        "command": "containerlab.lab.gotty.attach",
        "title": "Share Lab (attach)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.gotty.detach",
        "title": "Share Lab (detach)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.gotty.reattach",
        "title": "Share Lab (reattach)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.gotty.copyLink",
        "title": "Copy GoTTY link"
      },
      {
        "command": "containerlab.lab.fcli.bgpPeers",
        "title": "bgp-peers",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.bgpRib",
        "title": "bgp-rib",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.ipv4Rib",
        "title": "ipv4-rib",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.lldp",
        "title": "lldp",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.mac",
        "title": "mac",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.ni",
        "title": "ni",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.subif",
        "title": "subif",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.sysInfo",
        "title": "sys-info",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.fcli.custom",
        "title": "custom",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.treeView.runningLabs.hideNonOwnedLabs",
        "title": "Hide non-owned"
      },
      {
        "command": "containerlab.treeView.runningLabs.showNonOwnedLabs",
        "title": "Show non-owned"
      },
      {
        "command": "containerlab.treeView.runningLabs.filter",
        "title": "Filter running labs",
        "icon": "$(search)"
      },
      {
        "command": "containerlab.treeView.runningLabs.clearFilter",
        "title": "Clear running labs filter",
        "icon": "$(close)"
      },
      {
        "command": "containerlab.treeView.localLabs.filter",
        "title": "Filter local labs",
        "icon": "$(search)"
      },
      {
        "command": "containerlab.treeView.localLabs.clearFilter",
        "title": "Clear local labs filter",
        "icon": "$(close)"
      }
    ],
    "submenus": [
      {
        "id": "containerlab.submenu.node.copy",
        "label": "Copy"
      },
      {
        "id": "containerlab.submenu.lab.graph.drawio",
        "label": "Graph (draw.io)"
      },
      {
        "id": "containerlab.submenu.lab.share",
        "label": "Share Lab (sshx)"
      },
      {
        "id": "containerlab.submenu.lab.gotty",
        "label": "Share Lab (gotty)"
      },
      {
        "id": "containerlab.submenu.lab.extras",
        "label": "Extras"
      },
      {
        "id": "containerlab.submenu.lab.fcli",
        "label": "Run fcli (srlinux)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "containerlab.refresh",
          "when": "view == runningLabs",
          "group": "navigation@8"
        },
        {
          "command": "containerlab.lab.deploy.specificFile",
          "when": "view == runningLabs",
          "group": "navigation@1"
        },
        {
          "command": "containerlab.inspectAll",
          "when": "view == runningLabs",
          "group": "navigation@2"
        },
        {
          "command": "containerlab.editor.topoViewerEditor",
          "when": "view == localLabs",
          "group": "navigation@1"
        },
        {
          "command": "containerlab.lab.cloneRepo",
          "when": "view == localLabs",
          "group": "navigation@2"
        },
        {
          "command": "containerlab.treeView.runningLabs.hideNonOwnedLabs",
          "when": "view == runningLabs && !containerlab:nonOwnedLabsHidden",
          "group": "navigation@0"
        },
        {
          "command": "containerlab.treeView.runningLabs.showNonOwnedLabs",
          "when": "view == runningLabs && containerlab:nonOwnedLabsHidden",
          "group": "navigation@0"
        },
        {
          "command": "containerlab.treeView.runningLabs.filter",
          "when": "view == runningLabs",
          "group": "navigation@98"
        },
        {
          "command": "containerlab.treeView.runningLabs.clearFilter",
          "when": "view == runningLabs",
          "group": "navigation@99"
        },
        {
          "command": "containerlab.treeView.localLabs.filter",
          "when": "view == localLabs && localLabsEmpty == false",
          "group": "navigation@98"
        },
        {
          "command": "containerlab.treeView.localLabs.clearFilter",
          "when": "view == localLabs",
          "group": "navigation@99"
        }
      ],
      "editor/title": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.graph.topoViewer",
          "group": "navigation@0"
        }
      ],
      "editor/title/run": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy",
          "group": "navigation@1"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy.cleanup",
          "group": "navigation@2"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy",
          "group": "navigation@3"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy.cleanup",
          "group": "navigation@4"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy",
          "group": "navigation@5"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy.cleanup",
          "group": "navigation@6"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy",
          "group": "clabLabActions@1"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy.cleanup",
          "group": "clabLabActions@2"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy",
          "group": "clabLabActions@3"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy.cleanup",
          "group": "clabLabActions@4"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy",
          "group": "clabLabActions@5"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy.cleanup",
          "group": "clabLabActions@6"
        },
        {
          "submenu": "containerlab.submenu.lab.graph.drawio",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.topoViewer",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@1"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy",
          "group": "clabLabActions@1"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy.cleanup",
          "group": "clabLabActions@2"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy",
          "group": "clabLabActions@3"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy.cleanup",
          "group": "clabLabActions@4"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy",
          "group": "clabLabActions@5"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy.cleanup",
          "group": "clabLabActions@6"
        },
        {
          "submenu": "containerlab.submenu.lab.graph.drawio",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.topoViewer",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@1"
        }
      ],
      "view/item/context": [
        {
          "command": "containerlab.refresh",
          "group": "refresh@99"
        },
        {
          "command": "containerlab.lab.openFile",
          "when": "viewItem =~ /containerlabLab/",
          "group": "inline@0"
        },
        {
          "command": "containerlab.lab.copyPath",
          "when": "viewItem =~ /containerlabLab/",
          "group": "inline@1"
        },
        {
          "command": "containerlab.lab.openFile",
          "when": "viewItem =~ /containerlabLab/",
          "group": "labEditor@0"
        },
        {
          "command": "containerlab.editor.topoViewerEditor.open",
          "when": "viewItem =~ /containerlabLabUndeployed/",
          "group": "labEditor@1",
          "title": "Edit Topology (TopoViewer)"
        },
        {
          "command": "containerlab.lab.copyPath",
          "when": "viewItem =~ /containerlabLab/",
          "group": "labFile@2"
        },
        {
          "command": "containerlab.lab.addToWorkspace",
          "when": "viewItem == containerlabLabDeployed",
          "group": "labFile@3"
        },
        {
          "command": "containerlab.lab.openFolderInNewWindow",
          "when": "viewItem =~ /containerlabLab/",
          "group": "labFile@4"
        },
        {
          "command": "containerlab.lab.toggleFavorite",
          "title": "Add to Favorites",
          "when": "view == localLabs && viewItem =~ /containerlabLab(Deployed|Undeployed)$/",
          "group": "_favorites@0"
        },
        {
          "command": "containerlab.lab.toggleFavorite",
          "title": "Add to Favorites",
          "when": "view == runningLabs && viewItem =~ /containerlabLab(Deployed|Undeployed)$/",
          "group": "_favorites@0"
        },
        {
          "command": "containerlab.lab.toggleFavorite",
          "title": "Remove from Favorites",
          "when": "view == localLabs && viewItem =~ /containerlabLab.*Favorite/",
          "group": "_favorites@0"
        },
        {
          "command": "containerlab.lab.toggleFavorite",
          "title": "Remove from Favorites",
          "when": "view == runningLabs && viewItem =~ /containerlabLab.*Favorite/",
          "group": "_favorites@0"
        },
        {
          "command": "containerlab.lab.deploy",
          "when": "viewItem =~ /containerlabLabUndeployed/",
          "group": "clabActions@1"
        },
        {
          "command": "containerlab.lab.deploy.cleanup",
          "when": "viewItem =~ /containerlabLabUndeployed/",
          "group": "clabActions@2"
        },
        {
          "command": "containerlab.lab.destroy",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "clabActions@3"
        },
        {
          "command": "containerlab.lab.destroy.cleanup",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "clabActions@4"
        },
        {
          "command": "containerlab.lab.redeploy",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "clabActions@5"
        },
        {
          "command": "containerlab.lab.redeploy.cleanup",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "clabActions@6"
        },
        {
          "command": "containerlab.lab.save",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "clabActions@7"
        },
        {
          "command": "containerlab.lab.delete",
          "when": "viewItem =~ /containerlabLabUndeployed/",
          "group": "clabActions@8"
        },
        {
          "command": "containerlab.lab.sshToAllNodes",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "connect@0"
        },
        {
          "command": "containerlab.node.openBrowser",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigationPort@8"
        },
        {
          "command": "containerlab.inspectOneLab",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "clabActions@9"
        },
        {
          "submenu": "containerlab.submenu.lab.share",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "connect@1"
        },
        {
          "submenu": "containerlab.submenu.lab.gotty",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "connect@2"
        },
        {
          "submenu": "containerlab.submenu.lab.extras",
          "when": "viewItem =~ /containerlabLabDeployed/",
          "group": "pExtras@0"
        },
        {
          "submenu": "containerlab.submenu.lab.graph.drawio",
          "when": "viewItem =~ /containerlabLab/",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.topoViewer",
          "when": "viewItem =~ /containerlabLab/",
          "group": "graph@1"
        },
        {
          "command": "containerlab.node.start",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@2"
        },
        {
          "command": "containerlab.node.stop",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@3"
        },
        {
          "command": "containerlab.node.save",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigationSaveCfg@4"
        },
        {
          "command": "containerlab.node.attachShell",
          "when": "viewItem == containerlabContainer",
          "group": "inline@1"
        },
        {
          "command": "containerlab.node.ssh",
          "when": "viewItem == containerlabContainer",
          "group": "inline@2"
        },
        {
          "command": "containerlab.node.showLogs",
          "when": "viewItem == containerlabContainer",
          "group": "inline@0"
        },
        {
          "command": "containerlab.node.attachShell",
          "when": "viewItem == containerlabContainer",
          "group": "nodeConnect@2"
        },
        {
          "command": "containerlab.node.ssh",
          "when": "viewItem == containerlabContainer",
          "group": "nodeConnect@0"
        },
        {
          "command": "containerlab.node.telnet",
          "when": "viewItem == containerlabContainer",
          "group": "nodeConnect@1"
        },
        {
          "command": "containerlab.node.showLogs",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigationLogs@0"
        },
        {
          "command": "containerlab.node.manageImpairments",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigationImpairments@0"
        },
        {
          "submenu": "containerlab.submenu.node.copy",
          "when": "viewItem == containerlabContainer",
          "group": "nodeCopySubmenu"
        },
        {
          "command": "containerlab.interface.capture",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "inline@1"
        },
        {
          "command": "containerlab.interface.capture",
          "when": "viewItem == containerlabInterfaceUp && containerlab:isLocalCaptureAllowed == true",
          "group": "captureContextMenu@1"
        },
        {
          "command": "containerlab.interface.captureWithEdgeshark",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "captureContextMenu@1"
        },
        {
          "command": "containerlab.interface.captureWithEdgesharkVNC",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "captureContextMenu@2"
        },
        {
          "command": "containerlab.interface.setDelay",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@0"
        },
        {
          "command": "containerlab.interface.setJitter",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@1"
        },
        {
          "command": "containerlab.interface.setLoss",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@2"
        },
        {
          "command": "containerlab.interface.setRate",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@3"
        },
        {
          "command": "containerlab.interface.setCorruption",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@4"
        },
        {
          "command": "containerlab.interface.copyMACAddress",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "copyContextMenu@0"
        },
        {
          "command": "containerlab.lab.sshx.copyLink",
          "when": "viewItem == containerlabSSHXLink",
          "group": "navigation@0"
        },
        {
          "command": "containerlab.lab.gotty.copyLink",
          "when": "viewItem == containerlabGottyLink",
          "group": "navigation@0"
        }
      ],
      "commandPalette": [
        {
          "command": "containerlab.lab.deploy",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.deploy.cleanup",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.redeploy",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.redeploy.cleanup",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.destroy",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.destroy.cleanup",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.graph.drawio.horizontal",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.graph.drawio.vertical",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.graph.drawio.interactive",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.install.edgeshark",
          "when": "true"
        },
        {
          "command": "containerlab.uninstall.edgeshark",
          "when": "true"
        },
        {
          "command": "containerlab.node.openBrowser",
          "when": "viewItem == containerlabContainer"
        }
      ],
      "containerlab.submenu.node.copy": [
        {
          "command": "containerlab.node.copyName",
          "group": "navigation@1"
        },
        {
          "command": "containerlab.node.copyID",
          "group": "navigation@2"
        },
        {
          "command": "containerlab.node.copyIPv4Address",
          "group": "navigation@3"
        },
        {
          "command": "containerlab.node.copyIPv6Address",
          "group": "navigation@4"
        },
        {
          "command": "containerlab.node.copyKind",
          "group": "navigation@5"
        },
        {
          "command": "containerlab.node.copyImage",
          "group": "navigation@6"
        }
      ],
      "containerlab.submenu.lab.graph.drawio": [
        {
          "command": "containerlab.lab.graph.drawio.horizontal",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.drawio.vertical",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.drawio.interactive",
          "group": "graph@0"
        }
      ],
      "containerlab.submenu.lab.share": [
        {
          "command": "containerlab.lab.sshx.attach",
          "group": "share@1"
        },
        {
          "command": "containerlab.lab.sshx.detach",
          "group": "share@2"
        },
        {
          "command": "containerlab.lab.sshx.reattach",
          "group": "share@3"
        }
      ],
      "containerlab.submenu.lab.gotty": [
        {
          "command": "containerlab.lab.gotty.attach",
          "group": "gotty@1"
        },
        {
          "command": "containerlab.lab.gotty.detach",
          "group": "gotty@2"
        },
        {
          "command": "containerlab.lab.gotty.reattach",
          "group": "gotty@3"
        }
      ],
      "containerlab.submenu.lab.extras": [
        {
          "submenu": "containerlab.submenu.lab.fcli",
          "group": "extras@0"
        }
      ],
      "containerlab.submenu.lab.fcli": [
        {
          "command": "containerlab.lab.fcli.bgpPeers",
          "group": "extras@1"
        },
        {
          "command": "containerlab.lab.fcli.bgpRib",
          "group": "extras@2"
        },
        {
          "command": "containerlab.lab.fcli.ipv4Rib",
          "group": "extras@3"
        },
        {
          "command": "containerlab.lab.fcli.lldp",
          "group": "extras@4"
        },
        {
          "command": "containerlab.lab.fcli.mac",
          "group": "extras@5"
        },
        {
          "command": "containerlab.lab.fcli.ni",
          "group": "extras@6"
        },
        {
          "command": "containerlab.lab.fcli.subif",
          "group": "extras@7"
        },
        {
          "command": "containerlab.lab.fcli.sysInfo",
          "group": "extras@8"
        },
        {
          "command": "containerlab.lab.fcli.custom",
          "group": "extras@9"
        }
      ]
    },
    "keybindings": [
      {
        "key": "ctrl+alt+d",
        "mac": "cmd+alt+d",
        "command": "containerlab.lab.deploy"
      },
      {
        "key": "ctrl+alt+r",
        "mac": "cmd+alt+r",
        "command": "containerlab.lab.redeploy"
      },
      {
        "key": "ctrl+alt+k",
        "mac": "cmd+alt+k",
        "command": "containerlab.lab.destroy"
      },
      {
        "key": "ctrl+alt+g",
        "mac": "cmd+alt+g",
        "command": "containerlab.lab.graph.topoViewer"
      }
    ],
    "configuration": {
      "title": "Containerlab",
      "properties": {
        "containerlab.sudoEnabledByDefault": {
          "type": "boolean",
          "default": false,
          "description": "Whether to prepend 'sudo' to all containerlab commands by default."
        },
        "containerlab.refreshInterval": {
          "type": "number",
          "default": 10000,
          "description": "Refresh interval (in milliseconds) for the Containerlab Explorer."
        },
        "containerlab.node.execCommandMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Change the default exec action for node when using the 'attach' command. Enter in the mapping between the kind and command.\n\nFor example: `{\"nokia_srlinux\": \"sr_cli\"}` means that `docker exec -it <container> sr_cli` will be executed if `<container>` is the `nokia_srlinux` kind."
        },
        "containerlab.node.sshUserMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Custom SSH users for different node kinds. Enter the mapping between the kind and SSH username.\n\nFor example: `{\"nokia_srlinux\": \"clab\"}` means that `ssh clab@<container>` will be used if `<container>` is the `nokia_srlinux` kind."
        },
        "containerlab.remote.hostname": {
          "type": "string",
          "default": "",
          "markdownDescription": "Hostname or IP address for **Edgeshark packet capture** connections. Can be either DNS resolvable hostname, or an IPv4/6 address. This setting tells Edgeshark where to connect for capturing packets.\n\n**Note:** A configured hostname for *this session of VS Code* takes precedence. (Command palette: **Containerlab: Configure session hostname**)"
        },
        "containerlab.remote.packetflixPort": {
          "type": "number",
          "default": 5001,
          "markdownDescription": "Port for the **Packetflix WebSocket endpoint** used by Edgeshark packet capture. This is where Edgeshark connects to stream captured packets."
        },
        "containerlab.drawioDefaultTheme": {
          "type": "string",
          "enum": [
            "nokia_modern",
            "nokia",
            "grafana"
          ],
          "default": "nokia_modern",
          "description": "Default theme to use when generating DrawIO graphs."
        },
        "containerlab.runtime": {
          "type": "string",
          "enum": [
            "docker",
            "podman",
            "ignite"
          ],
          "default": "docker",
          "description": "Set container runtime used by containerlab."
        },
        "containerlab.skipCleanupWarning": {
          "type": "boolean",
          "default": false,
          "description": "If true, skip the warning popup for cleanup commands (redeploy/destroy cleanup)."
        },
        "containerlab.deploy.extraArgs": {
          "type": "string",
          "default": "",
          "description": "Additional command-line options appended to all 'containerlab deploy' and 'containerlab redeploy' commands."
        },
        "containerlab.destroy.extraArgs": {
          "type": "string",
          "default": "",
          "description": "Additional command-line options appended to all 'containerlab destroy' commands."
        },
        "containerlab.showWelcomePage": {
          "type": "boolean",
          "default": true,
          "description": "Show the welcome page when the extension activates."
        },
        "containerlab.node.telnetPort": {
          "type": "number",
          "default": 5000,
          "description": "Port to connect when telnetting to the node with 'docker exec -it <node> telnet 127.0.0.1 <port>'"
        },
        "containerlab.extras.fcli.extraDockerArgs": {
          "type": "string",
          "default": "",
          "description": "Additional docker (or podman) arguments to append to the fcli command"
        },
        "containerlab.capture.preferredAction": {
          "type": "string",
          "default": "Wireshark VNC",
          "enum": [
            "Edgeshark",
            "Wireshark VNC"
          ],
          "description": "The preferred capture method when using the capture interface quick action on the interface tree item"
        },
        "containerlab.capture.wireshark.dockerImage": {
          "type": "string",
          "default": "ghcr.io/kaelemc/wireshark-vnc-docker:latest",
          "description": "The docker image to use for Wireshark/Edgeshark VNC capture. Requires full image name + tag"
        },
        "containerlab.capture.wireshark.pullPolicy": {
          "type": "string",
          "default": "always",
          "enum": [
            "always",
            "missing",
            "never"
          ],
          "description": "The pull policy of the Wireshark docker image"
        },
        "containerlab.capture.wireshark.extraDockerArgs": {
          "type": "string",
          "default": "-e HTTP_PROXY=\"\" -e http_proxy=\"\"",
          "description": "Extra arguments to pass to the run command for the wireshark VNC container. Useful for things like bind mounts etc."
        },
        "containerlab.capture.wireshark.theme": {
          "type": "string",
          "default": "Follow VS Code theme",
          "enum": [
            "Follow VS Code theme",
            "Dark",
            "Light"
          ],
          "description": "The theme, or colour scheme of the wireshark application."
        },
        "containerlab.capture.wireshark.stayOpenInBackground": {
          "type": "boolean",
          "default": "true",
          "description": "Keep Wireshark VNC sessions alive, even when the capture tab is not active. Enabling this will consume more memory on both the client and remote containerlab host system."
        },
        "containerlab.edgeshark.extraEnvironmentVars": {
          "type": "string",
          "default": "HTTP_PROXY=, http_proxy=",
          "description": "Comma-separated environment variables to inject into edgeshark containers (e.g., 'HTTP_PROXY=, http_proxy=, NO_PROXY=localhost'). Each variable will be added to the environment section of both gostwire and packetflix services."
        },
        "containerlab.gotty.port": {
          "type": "number",
          "default": 8080,
          "description": "Port for GoTTY web terminal."
        },
        "containerlab.editor.customNodes": {
          "type": "array",
          "default": [
            {
              "name": "SRLinux Latest",
              "kind": "nokia_srlinux",
              "type": "ixrd1",
              "image": "ghcr.io/nokia/srlinux:latest",
              "icon": "router",
              "baseName": "srl",
              "setDefault": true
            },
            {
              "name": "Network Multitool",
              "kind": "linux",
              "image": "ghcr.io/srl-labs/network-multitool:latest",
              "icon": "client",
              "baseName": "client",
              "setDefault": false
            }
          ],
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "icon": {
                "type": "string"
              },
              "baseName": {
                "type": "string"
              },
              "setDefault": {
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "kind"
            ],
            "additionalProperties": true
          },
          "markdownDescription": "Custom node templates available in the TopoViewer add-node menu. Can store full node configurations including startup-config, binds, env vars, etc."
        },
        "containerlab.editor.interfacePatternMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {
            "nokia_srlinux": "e1-{n}",
            "nokia_srsim": "1/1/c{n}/1",
            "nokia_sros": "1/1/{n}",
            "cisco_xrd": "Gi0-0-0-{n}",
            "cisco_xrv": "Gi0/0/0/{n}",
            "cisco_xrv9k": "Gi0/0/0/{n}",
            "cisco_csr1000v": "Gi{n}",
            "cisco_c8000v": "Gi{n}",
            "cisco_cat9kv": "Gi1/0/{n}",
            "cisco_iol": "e0/{n}"
          },
          "markdownDescription": "Interface name pattern used when creating links in the TopoViewer edit mode.. Use `{n}` as the incrementing counter. Example: `{ \"nokia_srlinux\": \"e1-{n}\" }`"
        },
        "containerlab.editor.hideDummyLinks": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "When enabled, TopoViewer hides dummy links and their synthetic nodes without modifying the lab YAML file."
        },
        "containerlab.editor.updateLinkEndpointsOnKindChange": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "When enabled, changing a node's kind updates connected link endpoints to match the new kind's interface pattern."
        }
      }
    }
  },
  "scripts": {
    "compile": "tsc -p .",
    "watch": "tsc -w -p .",
    "build:webview": "webpack --config webpack.config.js",
    "bundle": "node esbuild.config.js",
    "package": "rm -rf dist && npm run lint && vsce package --allow-package-secrets npm",
    "vscode:prepublish": "npm-run-all --parallel bundle build:webview",
    "package:dev": "npm run watch & webpack --config webpack.config.js --watch",
    "lint": "eslint --ext .ts,.tsx .",
    "lint:fix": "npm run lint -- --fix",
    "test": "npm run test:compile && mocha --extension js --reporter mochawesome \"out/test/**/*.test.js\"",
    "test:compile": "tsc -p test/tsconfig.json"
  },
  "devDependencies": {
    "@fortawesome/fontawesome-free": "^7.0.1",
    "@tailwindcss/postcss": "^4.1.13",
    "@types/chai": "^5.2.2",
    "@types/cytoscape": "^3.21.9",
    "@types/cytoscape-cxtmenu": "^3.4.4",
    "@types/cytoscape-edgehandles": "^4.0.4",
    "@types/leaflet": "^1.9.20",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.4.0",
    "@types/sinon": "^17.0.4",
    "@types/vscode": "^1.99.0",
    "@typescript-eslint/eslint-plugin": "^8.41.0",
    "@typescript-eslint/parser": "^8.38.0",
    "@vscode/vsce": "^3.6.0",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "autoprefixer": "^10.4.21",
    "chai": "^6.0.1",
    "css-loader": "^7.1.2",
    "cytoscape": "^3.33.1",
    "cytoscape-cola": "^2.5.1",
    "cytoscape-cxtmenu": "^3.5.0",
    "cytoscape-edgehandles": "^4.0.1",
    "cytoscape-grid-guide": "^2.3.3",
    "cytoscape-leaf": "^1.2.4",
    "cytoscape-popper": "^4.0.1",
    "cytoscape-svg": "^0.4.0",
    "esbuild": "^0.25.10",
    "esbuild-loader": "^4.3.0",
    "eslint": "^9.35.0",
    "eslint-plugin-sonarjs": "^3.0.5",
    "fs-extra": "^11.3.2",
    "jscpd": "^4.0.5",
    "leaflet": "^1.9.4",
    "mini-css-extract-plugin": "^2.9.3",
    "mocha": "^11.7.2",
    "mochawesome": "^7.1.4",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.5.6",
    "postcss-loader": "^8.2.0",
    "sinon": "^21.0.0",
    "tailwindcss": "^4.1.13",
    "tippy.js": "^6.3.7",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.44.0",
    "webpack-cli": "^6.0.1",
    "yaml": "^2.8.1"
  }
}