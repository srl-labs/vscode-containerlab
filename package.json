{
  "name": "vscode-containerlab",
  "publisher": "srl-labs",
  "displayName": "Containerlab",
  "icon": "resources/containerlab.png",
  "description": "Manages containerlab topologies in VS Code",
  "author": "SRL Labs",
  "version": "0.12.0",
  "homepage": "https://containerlab.dev/manual/vsc-extension/",
  "engines": {
    "vscode": "^1.70.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/srl-labs/vscode-containerlab"
  },
  "extensionPack": [
    "hediet.vscode-drawio",
    "redhat.vscode-yaml"
  ],
  "main": "./out/extension.js",
  "activationEvents": [
    "onStartupFinished"
  ],
  "categories": [
    "Programming Languages",
    "Linters",
    "Other"
  ],
  "keywords": [
    "containerlab",
    "clab",
    "docker",
    "container",
    "containers"
  ],
  "license": "Apache-2.0",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "containerlabViewContainer",
          "title": "Containerlab",
          "icon": "resources/containerlab.svg"
        }
      ]
    },
    "views": {
      "containerlabViewContainer": [
        {
          "id": "containerlabExplorer",
          "name": "Containerlab Explorer"
        }
      ]
    },
    "commands": [
      {
        "command": "containerlab.refresh",
        "title": "Refresh Containerlab Explorer",
        "icon": "$(refresh)"
      },
      {
        "command": "containerlab.lab.openFile",
        "title": "Edit topology",
        "icon": "$(pencil)"
      },
      {
        "command": "containerlab.lab.copyPath",
        "title": "Copy file path",
        "icon": "$(copy)"
      },
      {
        "command": "containerlab.lab.deploy",
        "title": "Deploy",
        "icon": "$(play)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.deploy.cleanup",
        "title": "Deploy (cleanup)",
        "icon": "$(play)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.deploy.specificFile",
        "title": "Deploy lab file",
        "icon": "$(plus)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.redeploy",
        "title": "Redeploy",
        "icon": "$(refresh)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.redeploy.cleanup",
        "title": "Redeploy (cleanup)",
        "icon": "$(refresh)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.destroy",
        "title": "Destroy",
        "icon": "$(trash)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.destroy.cleanup",
        "title": "Destroy (cleanup)",
        "icon": "$(trash)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.save",
        "title": "Save configs",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.inspectAll",
        "title": "Inspect (All Labs)",
        "category": "Containerlab",
        "icon": "$(search)"
      },
      {
        "command": "containerlab.inspectOneLab",
        "title": "Inspect",
        "category": "Containerlab",
        "icon": "$(search)"
      },
      {
        "command": "containerlab.lab.graph",
        "title": "Graph (Web)",
        "icon": "$(graph-line)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.graph.drawio",
        "title": "Graph (draw.io)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.graph.drawio.interactive",
        "title": "Graph (draw.io, Interactive)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.graph.topoViewer",
        "title": "Graph (TopoViewer)",
        "icon": "$(graph-line)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.editor.topoViewerEditor",
        "title": "New topology file",
        "icon": "$(new-file)",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.lab.addToWorkspace",
        "title": "Add to Workspace",
        "category": "Containerlab",
        "icon": "$(folder-opened)"
      },
      {
        "command": "containerlab.lab.openFolderInNewWindow",
        "title": "Open Folder in New Window",
        "icon": "$(folder-opened)"
      },
      {
        "command": "containerlab.lab.sshToAllNodes",
        "title": "SSH (All nodes)"
      },
      {
        "command": "containerlab.node.start",
        "title": "Start"
      },
      {
        "command": "containerlab.node.stop",
        "title": "Stop"
      },
      {
        "command": "containerlab.node.save",
        "title": "Save config"
      },
      {
        "command": "containerlab.node.attachShell",
        "title": "Attach shell",
        "icon": "$(terminal)"
      },
      {
        "command": "containerlab.node.ssh",
        "title": "Connect (SSH)",
        "icon": "$(remote)"
      },
      {
        "command": "containerlab.node.telnet",
        "title": "Connect (Telnet)"
      },
      {
        "command": "containerlab.node.showLogs",
        "title": "View logs",
        "icon": "$(list-unordered)"
      },
      {
        "command": "containerlab.node.manageImpairments",
        "title": "Link Impairments",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.node.copyIPv4Address",
        "title": "IPv4 Address"
      },
      {
        "command": "containerlab.node.copyIPv6Address",
        "title": "IPv6 Address"
      },
      {
        "command": "containerlab.node.copyName",
        "title": "Name"
      },
      {
        "command": "containerlab.node.copyID",
        "title": "Container ID"
      },
      {
        "command": "containerlab.node.copyKind",
        "title": "Kind"
      },
      {
        "command": "containerlab.node.copyImage",
        "title": "Image"
      },
      {
        "command": "containerlab.interface.capture",
        "title": "Capture interface",
        "icon": {
          "light": "resources/icons/wireshark_light.svg",
          "dark": "resources/icons/wireshark_dark.svg"
        }
      },
      {
        "command": "containerlab.interface.captureWithEdgeshark",
        "title": "Capture interface (Edgeshark)"
      },
      {
        "command": "containerlab.interface.setDelay",
        "title": "Set delay"
      },
      {
        "command": "containerlab.interface.setJitter",
        "title": "Set jitter"
      },
      {
        "command": "containerlab.interface.setLoss",
        "title": "Set packet loss"
      },
      {
        "command": "containerlab.interface.setRate",
        "title": "Set rate-limit"
      },
      {
        "command": "containerlab.interface.setCorruption",
        "title": "Set corruption"
      },
      {
        "command": "containerlab.interface.copyMACAddress",
        "title": "Copy MAC address"
      },
      {
        "command": "containerlab.install.edgeshark",
        "title": "Install Edgeshark",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.uninstall.edgeshark",
        "title": "Uninstall Edgeshark",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.set.sessionHostname",
        "title": "Configure hostname for this session",
        "category": "Containerlab"
      },
      {
        "command": "containerlab.node.openBrowser",
        "title": "Open Port in Browser",
        "icon": "$(globe)",
        "category": "Containerlab"
      }
    ],
    "submenus": [
      {
        "id": "containerlab.submenu.node.copy",
        "label": "Copy"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "containerlab.refresh",
          "when": "view == containerlabExplorer",
          "group": "navigation@2"
        },
        {
          "command": "containerlab.lab.deploy.specificFile",
          "when": "view == containerlabExplorer",
          "group": "navigation@1"
        },
        {
          "command": "containerlab.editor.topoViewerEditor",
          "when": "view == containerlabExplorer",
          "group": "navigation@3"
        },
        {
          "command": "containerlab.inspectAll",
          "when": "view == containerlabExplorer",
          "group": "navigation@9"
        }
      ],
      "editor/title": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.graph.topoViewer",
          "group": "navigation@0"
        }
      ],
      "editor/title/run": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy",
          "group": "navigation@1"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy.cleanup",
          "group": "navigation@2"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy",
          "group": "navigation@3"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy.cleanup",
          "group": "navigation@4"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy",
          "group": "navigation@5"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy.cleanup",
          "group": "navigation@6"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy",
          "group": "clabLabActions@1"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.deploy.cleanup",
          "group": "clabLabActions@2"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy",
          "group": "clabLabActions@3"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.redeploy.cleanup",
          "group": "clabLabActions@4"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy",
          "group": "clabLabActions@5"
        },
        {
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "command": "containerlab.lab.destroy.cleanup",
          "group": "clabLabActions@6"
        },
        {
          "command": "containerlab.lab.graph",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.drawio",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@1"
        },
        {
          "command": "containerlab.lab.graph.drawio.interactive",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@2"
        },
        {
          "command": "containerlab.lab.graph.topoViewer",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/",
          "group": "graph@3"
        }
      ],
      "view/item/context": [
        {
          "command": "containerlab.refresh",
          "when": "view == containerlabExplorer",
          "group": "refresh@99"
        },
        {
          "command": "containerlab.lab.openFile",
          "when": "viewItem =~ /containerlabLab/",
          "group": "inline@0"
        },
        {
          "command": "containerlab.lab.copyPath",
          "when": "viewItem =~ /containerlabLab/",
          "group": "inline@1"
        },
        {
          "command": "containerlab.lab.openFile",
          "when": "viewItem =~ /containerlabLab/",
          "group": "labFile@0"
        },
        {
          "command": "containerlab.lab.copyPath",
          "when": "viewItem =~ /containerlabLab/",
          "group": "labFile@1"
        },
        {
          "command": "containerlab.lab.addToWorkspace",
          "when": "viewItem == containerlabLabDeployed",
          "group": "labFile@2"
        },
        {
          "command": "containerlab.lab.openFolderInNewWindow",
          "when": "viewItem =~ /containerlabLab/",
          "group": "labFile@3"
        },
        {
          "command": "containerlab.lab.deploy",
          "when": "viewItem == containerlabLabUndeployed",
          "group": "navigation@1"
        },
        {
          "command": "containerlab.lab.deploy.cleanup",
          "when": "viewItem == containerlabLabUndeployed",
          "group": "navigation@2"
        },
        {
          "command": "containerlab.lab.destroy",
          "when": "viewItem == containerlabLabDeployed",
          "group": "navigation@3"
        },
        {
          "command": "containerlab.lab.destroy.cleanup",
          "when": "viewItem == containerlabLabDeployed",
          "group": "navigation@4"
        },
        {
          "command": "containerlab.lab.redeploy",
          "when": "viewItem == containerlabLabDeployed",
          "group": "navigation@5"
        },
        {
          "command": "containerlab.lab.redeploy.cleanup",
          "when": "viewItem == containerlabLabDeployed",
          "group": "navigation@6"
        },
        {
          "command": "containerlab.lab.save",
          "when": "viewItem =~ /containerlabLab/",
          "group": "navigation@7"
        },
        {
          "command": "containerlab.lab.sshToAllNodes",
          "when": "viewItem == containerlabLabDeployed",
          "group": "connect@0"
        },
        {
          "command": "containerlab.node.openBrowser",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@8"
        },
        {
          "command": "containerlab.inspectOneLab",
          "when": "viewItem == containerlabLabDeployed",
          "group": "navigation@9"
        },
        {
          "command": "containerlab.lab.graph",
          "when": "viewItem =~ /containerlabLab/",
          "group": "graph@0"
        },
        {
          "command": "containerlab.lab.graph.drawio",
          "when": "viewItem =~ /containerlabLab/",
          "group": "graph@1"
        },
        {
          "command": "containerlab.lab.graph.drawio.interactive",
          "when": "viewItem =~ /containerlabLab/",
          "group": "graph@2"
        },
        {
          "command": "containerlab.lab.graph.topoViewer",
          "when": "viewItem == containerlabLabDeployed",
          "group": "graph@3"
        },
        {
          "command": "containerlab.node.start",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@2"
        },
        {
          "command": "containerlab.node.stop",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@3"
        },
        {
          "command": "containerlab.node.save",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@4"
        },
        {
          "command": "containerlab.node.attachShell",
          "when": "viewItem == containerlabContainer",
          "group": "inline@1"
        },
        {
          "command": "containerlab.node.ssh",
          "when": "viewItem == containerlabContainer",
          "group": "inline@2"
        },
        {
          "command": "containerlab.node.showLogs",
          "when": "viewItem == containerlabContainer",
          "group": "inline@0"
        },
        {
          "command": "containerlab.node.attachShell",
          "when": "viewItem == containerlabContainer",
          "group": "nodeConnect@2"
        },
        {
          "command": "containerlab.node.ssh",
          "when": "viewItem == containerlabContainer",
          "group": "nodeConnect@0"
        },
        {
          "command": "containerlab.node.telnet",
          "when": "viewItem == containerlabContainer",
          "group": "nodeConnect@1"
        },
        {
          "command": "containerlab.node.showLogs",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@5"
        },
        {
          "command": "containerlab.node.manageImpairments",
          "when": "viewItem == containerlabContainer",
          "group": "nodeNavigation@6"
        },
        {
          "submenu": "containerlab.submenu.node.copy",
          "when": "viewItem == containerlabContainer",
          "group": "nodeCopySubmenu"
        },
        {
          "command": "containerlab.interface.capture",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "inline@1"
        },
        {
          "command": "containerlab.interface.capture",
          "when": "viewItem == containerlabInterfaceUp && containerlab:isLocalCaptureAllowed == true",
          "group": "captureContextMenu@1"
        },
        {
          "command": "containerlab.interface.captureWithEdgeshark",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "captureContextMenu@1"
        },
        {
          "command": "containerlab.interface.setDelay",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@0"
        },
        {
          "command": "containerlab.interface.setJitter",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@1"
        },
        {
          "command": "containerlab.interface.setLoss",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@2"
        },
        {
          "command": "containerlab.interface.setRate",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@3"
        },
        {
          "command": "containerlab.interface.setCorruption",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "impairmentContextMenu@4"
        },
        {
          "command": "containerlab.interface.copyMACAddress",
          "when": "viewItem == containerlabInterfaceUp",
          "group": "copyContextMenu@0"
        }
      ],
      "commandPalette": [
        {
          "command": "containerlab.lab.deploy",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.deploy.cleanup",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.redeploy",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.redeploy.cleanup",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.destroy",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.destroy.cleanup",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.graph",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.graph.drawio",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.lab.graph.drawio.interactive",
          "when": "resourceFilename =~ /\\.clab\\.(yml|yaml)$/"
        },
        {
          "command": "containerlab.install.edgeshark",
          "when": "true"
        },
        {
          "command": "containerlab.uninstall.edgeshark",
          "when": "true"
        },
        {
          "command": "containerlab.node.openBrowser",
          "when": "viewItem == containerlabContainer"
        }
      ],
      "containerlab.submenu.node.copy": [
        {
          "command": "containerlab.node.copyName",
          "group": "navigation@1"
        },
        {
          "command": "containerlab.node.copyID",
          "group": "navigation@2"
        },
        {
          "command": "containerlab.node.copyIPv4Address",
          "group": "navigation@3"
        },
        {
          "command": "containerlab.node.copyIPv6Address",
          "group": "navigation@4"
        },
        {
          "command": "containerlab.node.copyKind",
          "group": "navigation@5"
        },
        {
          "command": "containerlab.node.copyImage",
          "group": "navigation@6"
        }
      ]
    },
    "keybindings": [
      {
        "key": "ctrl+alt+d",
        "mac": "cmd+alt+d",
        "command": "containerlab.lab.deploy"
      },
      {
        "key": "ctrl+alt+r",
        "mac": "cmd+alt+r",
        "command": "containerlab.lab.redeploy"
      },
      {
        "key": "ctrl+alt+k",
        "mac": "cmd+alt+k",
        "command": "containerlab.lab.destroy"
      },
      {
        "key": "ctrl+alt+g",
        "mac": "cmd+alt+g",
        "command": "containerlab.lab.graph.topoViewer"
      }
    ],
    "configuration": {
      "title": "Containerlab",
      "properties": {
        "containerlab.sudoEnabledByDefault": {
          "type": "boolean",
          "default": false,
          "description": "Whether to prepend 'sudo' to all containerlab commands by default."
        },
        "containerlab.refreshInterval": {
          "type": "number",
          "default": 10000,
          "description": "Refresh interval (in milliseconds) for the Containerlab Explorer."
        },
        "containerlab.node.execCommandMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Change the default exec action for node when using the 'attach' command. Enter in the mapping between the kind and command.\n\nFor example: `{\"nokia_srlinux\": \"sr_cli\"}` means that `docker exec -it <container> sr_cli` will be executed if `<container>` is the `nokia_srlinux` kind."
        },
        "containerlab.node.sshUserMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Custom SSH users for different node kinds. Enter the mapping between the kind and SSH username.\n\nFor example: `{\"nokia_srlinux\": \"clab\"}` means that `ssh clab@<container>` will be used if `<container>` is the `nokia_srlinux` kind."
        },
        "containerlab.wsl.wiresharkPath": {
          "type": "string",
          "default": "/mnt/c/Program Files/Wireshark/wireshark.exe",
          "markdownDescription": "The path to the wireshark executable on windows from inside WSL. The default path is `/mnt/c/Program Files/Wireshark/wireshark.exe`."
        },
        "containerlab.remote.hostname": {
          "type": "string",
          "default": "",
          "markdownDescription": "The hostname to use for connections to/from this host. Can be either DNS resolvable hostname, or an IPv4/6 address. Used for packet capture.\n\n**Note:** A configured hostname for *this session of VS Code* takes precedence. (Command palette: **Containerlab: Configure session hostname**)"
        },
        "containerlab.remote.packetflixPort": {
          "type": "number",
          "default": 5001,
          "description": "Port to use for the packetflix endpoint used for packet capture."
        },
        "containerlab.drawioDefaultTheme": {
          "type": "string",
          "enum": [
            "nokia_modern",
            "nokia",
            "grafana"
          ],
          "default": "nokia_modern",
          "description": "Default theme to use when generating DrawIO graphs."
        },
        "containerlab.runtime": {
          "type": "string",
          "enum": [
            "docker",
            "podman",
            "ignite"
          ],
          "default": "docker",
          "description": "Set container runtime used by containerlab."
        },
        "containerlab.skipCleanupWarning": {
          "type": "boolean",
          "default": false,
          "description": "If true, skip the warning popup for cleanup commands (redeploy/destroy cleanup)."
        },
        "containerlab.showWelcomePage": {
          "type": "boolean",
          "default": true,
          "description": "Show the welcome page when the extension activates."
        },
        "containerlab.node.telnetPort": {
          "type": "number",
          "default": 5000,
          "description": "Port to connect when telnetting to the node with 'docker exec -it <node> telnet 127.0.0.1 <port>'"
        }
      }
    }
  },
"scripts": {
  "compile": "tsc -p .",
  "watch": "tsc -w -p .",
  "build:webview": "webpack --config webpack.config.js",
  "package": "npm run compile && npm run build:webview && vsce package",
  "package:dev": "npm run watch & webpack --config webpack.config.js --watch"
  },
  "devDependencies": {
    "@types/cytoscape-cxtmenu": "^3.4.4",
    "@types/cytoscape-edgehandles": "^4.0.4",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^18.0.0",
    "@types/vscode": "^1.70.0",
    "typescript": "^5.7.3",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.7.2",
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-regular-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@types/cytoscape": "^3.21.9",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/vsce": "^3.3.2",
    "cytoscape": "^3.31.1",
    "cytoscape-cola": "^2.5.1",
    "cytoscape-cxtmenu": "^3.5.0",
    "cytoscape-edgehandles": "^4.0.1",
    "cytoscape-grid-guide": "^2.3.3",
    "socket.io": "^4.8.1",
    "ts-loader": "^9.5.2",
    "yaml": "^2.7.0"
  }
}
